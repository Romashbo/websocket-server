const http = require("http");
const WebSocket = require("ws");

const PORT = process.env.PORT || 4000;
const server = http.createServer();
const wss = new WebSocket.Server({ server });

let currentSessions = [];
let completedCount = 0;

wss.on("connection", (ws) => {
  console.log("üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  ws.send(
    JSON.stringify({
      type: "syncState",
      sessions: currentSessions,
      completedCount,
    })
  );

  ws.on("message", (message) => {
    try {
      const data = JSON.parse(message);

      if (data.type === "updateState") {
        currentSessions = data.sessions;
        completedCount = data.completedCount;

        // –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(
              JSON.stringify({
                type: "syncState",
                sessions: currentSessions,
                completedCount,
              })
            );
          }
        });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    }
  });

  ws.on("close", () => {
    console.log("üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
  });
});

server.listen(PORT, () => {
  console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
